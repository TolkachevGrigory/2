//1-е задание  Работать будем с NOMINAL деревом. Нужны будут ветки 4-импульсов лидирующего лептона (lep_0_p4_fast) и потерянной энергии (met_reco_p4_fast).
//Для начала я бы хотел увидеть от вас кинематические распределения конечных состояний распада W->enu:
//Импульс, направление по eta и phiс, энергия. Если сичитаете что-то еще важным - рисуйте. Каждая гистограмма на отдельной канве. Обязательно подпишите оси.
 
 
void exone()
{
  TFile* f= new TFile("/Users/grigorijtolkacev/Desktop/ATLAS/21.root", "READ");
  auto tree = (TTree*)f->Get("NOMINAL");

  TH1F *h11 = new TH1F("Pt", "lep;P_{T} [GeV];Entries", 50, 0, 100);
  TH1F *h12 = new TH1F("Eta", "lep;Eta ;Entries", 50, -3, 3);
  TH1F *h13 = new TH1F("Phi", "lep;Phi ;Entries", 50, -4, 4);
  TH1F *h14 = new TH1F("E", "lep;E [GeV];Entries", 50, 0, 400);
  TH1F *h21 = new TH1F("Pt", "met_reco;P_{T} [GeV];Entries", 50, -10, 120);
  TH1F *h22 = new TH1F("Eta", "met_reco;Eta ;Entries", 50, -3, 3);
  TH1F *h23 = new TH1F("Phi", "met_reco;Phi ;Entries", 50, -4, 4);
  TH1F *h24 = new TH1F("E", "met_reco;E [GeV];Entries", 50, -50, 150);
  TCanvas *c11 = new TCanvas("c11","",600,300);
  TCanvas *c12 = new TCanvas("c12","",600,300);
  TCanvas *c13 = new TCanvas("c13","",600,300);
  TCanvas *c14 = new TCanvas("c14","",600,300);
  TCanvas *c21 = new TCanvas("c21","",600,300);
  TCanvas *c22 = new TCanvas("c22","",600,300);
  TCanvas *c23 = new TCanvas("c23","",600,300);
  TCanvas *c24 = new TCanvas("c24","",600,300);


  h11->SetDirectory(gROOT);
  h12->SetDirectory(gROOT);
  h13->SetDirectory(gROOT);
  h14->SetDirectory(gROOT);
  h21->SetDirectory(gROOT);
  h22->SetDirectory(gROOT);
  h23->SetDirectory(gROOT);
  h24->SetDirectory(gROOT);


  TLorentzVector* lep_0 = 0;
  TLorentzVector* met_reco = 0;
  tree->SetBranchAddress("lep_0_p4", &lep_0);
  tree->SetBranchAddress("met_reco_p4", &met_reco);

  Long64_t nEvents = tree->GetEntries();
  std::cout<<"N events: "<< nEvents << std::endl;
    
    for (Long64_t i = 0; i < nEvents; i++) {
      tree->GetEntry(i);
      h11->Fill(lep_0->Pt());
  
    }
    for (Long64_t i = 0; i < nEvents; i++) {
        tree->GetEntry(i);
        h12->Fill(lep_0->Eta());
    }
    for (Long64_t i = 0; i < nEvents; i++) {
        tree->GetEntry(i);
        h13->Fill(lep_0->Phi());
    }
    for (Long64_t i = 0; i < nEvents; i++) {
        tree->GetEntry(i);
        h14->Fill(lep_0->E());
    }
    for (Long64_t i = 0; i < nEvents; i++) {
        tree->GetEntry(i);
        h21->Fill(met_reco->Pt());
        
    }
    for (Long64_t i = 0; i < nEvents; i++) {
        tree->GetEntry(i);
        h22->Fill(met_reco->Eta());
    }
    for (Long64_t i = 0; i < nEvents; i++) {
        tree->GetEntry(i);
        h23->Fill(met_reco->Phi());
    }
    for (Long64_t i = 0; i < nEvents; i++) {
        tree->GetEntry(i);
        h24->Fill(met_reco->E());
    }
    
    
  f->Close();
    
  c11->cd();
  h11->Draw();
  c12->cd();
  h12->Draw();
  c13->cd();
  h13->Draw();
  c14->cd();
  h14->Draw();
    c21->cd();
    h21->Draw();
    c22->cd();
    h22->Draw();
    c23->cd();
    h23->Draw();
    c24->cd();
    h24->Draw();

}
